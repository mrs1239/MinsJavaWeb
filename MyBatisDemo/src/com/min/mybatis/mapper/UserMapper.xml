<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离性 注意：使用mapper代理方法开发，namespace有特殊重要的作用 -->
<mapper namespace="com.min.mybatis.mapper.UserMapper">
	<!--定义sql片段
	id:sql片段的位移标识
	经验：是基于单表来定义sql片段，这样，此sql片段重用性高
	在sql片段中不要包括where
	  -->
	<sql id="query_user_where">
		<if test="userCustom!=null">
			<if test="userCustom.sex!=null and userCustom.sex!=''">
				and sex=#{userCustom.sex}
			</if>
			<if test="userCustom.username!=null and userCustom.username!=''">
				and username LIKE '%${userCustom.username}%'
			</if>
		</if>
		<!--使用foreach遍历ids集合中的id值,传入到sql语句中
		collection：指定输入对象中集合属性
		item：要遍历的集合每次遍历的值
		open：开始遍历的拼接字符串
		close：遍历完后的拼接字符串
		separator：遍历的两个对象中需要拼接的字符串
		 -->
		<!-- <if test="ids!=null">
			<foreach collection="ids" item="user_id" open="and (" close=")" separator="or" >
				每次遍历需要拼接的字符串
				id=#{user_id}
			</foreach>
		</if> -->
		<if test="ids!=null">
			<foreach collection="ids" item="user_id" 
					 open="and id IN(" close=")" separator=",">
			#{user_id}
			</foreach>
		</if>
	</sql>
	<!-- 定义查询结果字段名和pojo对象属性名的对应关系 type:需要映射的pojo对象类型 id:使用这个resultMap的唯一标识符 -->
	<resultMap type="com.min.mybatis.po.User" id="userResultMap">
		<!-- -->
		<id column="id_" property="id" />
		<result column="address_" property="address" />
	</resultMap>

	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 通过select执行数据库查询 id:表示映射文件中的sql 将sql语句封装到mappedStatement对象中，所以将id称为statement的id 
		#{}表示一个占位符号 parameterType:指定输入参数类型 #{id}:其中的id表示接受输入的参数，参数名称是id，如果输入参数是简单类型，则#{}中的参数名可以任意，可以value或其他名称 
		resultType:指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象 ${} 
		:表示拼接sql串，将接受到参数的内容不加任何修饰拼接在sql中。 使用${}拼接sql，引起sql注入 ${value}:接受输入参数的内容，如果传入类型是简单类型，${}中只能使用value -->
	<select id="findUserById" parameterType="int" resultType="user">
		SELECT
		* FROM USER WHERE ID = #{id}
	</select>

	<!-- 根据用户名模糊查询用户信息，可能返回多条 resultType:指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象 
		${} :表示拼接sql串，将接受到参数的内容不加任何修饰拼接在sql中。 使用${}拼接sql，引起sql注入 ${value}:接受输入参数的内容，如果传入类型是简单类型，${}中只能使用value -->
	<select id="findUserByName" parameterType="java.lang.String"
		resultType="com.min.mybatis.po.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>

	<!-- 用户信息的综合查询 
	#{userCustom.sex} 取出pojo包装对象中性别值
    ${userCustom.username} 取出pojo包装对象中的用户名 
    -->
	<select id="findUserList" parameterType="com.min.mybatis.po.UserQueryVo"
		resultType="com.min.mybatis.po.UserCustom">
		SELECT * from `user` 
		<!-- where标签可以自动去掉查询中的第一个and -->
	<where>
	<!-- 引用sql片段的id，如果refid指定的id不在本mapper文件中，需要前面加上namespace -->
		<include refid="query_user_where"></include>
	</where>
	<!-- 在这里还会引用其他的sql片段 -->
	</select>

	<!-- 用户信息综合查询列数表数 -->
	<select id="findUserCount" parameterType="com.min.mybatis.po.UserQueryVo"
		resultType="int">
		SELECT count(*) from `user` <!-- where标签可以自动去掉查询中的第一个and -->
		<where>
		<!-- 引用sql片段的id，如果refid指定的id不在本mapper文件中，需要前面加上namespace -->
		<include refid="query_user_where"></include>
		</where>
		<!-- 在这里还会引用其他的sql片段 -->
	</select>

	<!--根据用户id查询用户信息，结果类型用resultMap来指定 -->
	<select id="findUserByIdResultMap" parameterType="int"
		resultMap="userResultMap">
		SELECT id id_,address address_ from `user` WHERE ID = #{value}
	</select>

	<!-- 添加用户 parameterTypeL:指定输入参数是pojo(包括用户信息) #{}中指定pojo的属性名，接受到pojo对象的属性值,mybatis通过OGNL获取对象的属性值：Object-Graph 
		Navigation Language -->
	<insert id="addUser" parameterType="com.min.mybatis.po.User">
		<!-- 将插入数据的主键返回，返回到User对象中 SELECT LAST_INSERT_ID()：得到刚刚insert进去记录的主键值，只适用于自增主键 
			keyProperty:查询主键后设置到parameterType指定的对象的哪个属性 order:SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来讲，它的执行顺序 
			resultType：指定SELECT LAST_INSERT_ID()的结果类型 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		INSERT INTO
		USER(username,sex,address,birthday)
		value(#{username},#{sex},#{address},#{birthday})
	</insert>

	<!-- 根据用户名删除用户记录 -->
	<delete id="removeUser" parameterType="java.lang.Integer">
		DELETE FROM `user` WHERE
		username = #{id}
	</delete>

	<!-- 根据id更新用户 分析： 需要传入用户的id 需要传入用户的更新信息 parameterType为需要输入的字段对应的java对象 -->
	<update id="updateUser" parameterType="com.min.mybatis.po.User">
		update user set
		username=#{username},sex=#{sex},birthday=#{birthday},address=#{address}
		where id=#{id}
	</update>

</mapper>